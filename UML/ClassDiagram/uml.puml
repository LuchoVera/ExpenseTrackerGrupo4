@startuml ExpenseTrackerGroup4

left to right direction

skinparam linetype ortho

!define ENTITY class
!define SERVICE interface
!define REPOSITORY interface
!define CONTROLLER class

package Domain {
    package Interfaces {
        interface IEntity {
            + Id: Guid
        }
    }

    package Entities {
        ENTITY User {
            + Id: Guid
            + Name: String
            + Email: String
            + PasswordHash: String
            + CreatedAt: DateTime
        }

        ENTITY Expense {
            + Id: Guid
            + UserId: Guid
            + Amount: Decimal
            + Description: String
            + Category: String
            + Date: DateTime
            + CreatedAt: DateTime
        }

        ENTITY Income {
            + Id: Guid
            + UserId: Guid
            + Amount: Decimal
            + Source: String
            + Date: DateTime
            + CreatedAt: DateTime
        }

        ENTITY Budget {
            + Id: Guid
            + UserId: Guid
            + Month: DateTime
        }

        ENTITY Goal {
            + Id: Guid
            + UserId: Guid
            + GoalAmount: Decimal
            + Deadline: DateTime
            + CurrentAmount: Decimal
            + CreatedAt: DateTime
        }
    }

    Interfaces.IEntity <|.. Entities.User
    Interfaces.IEntity <|.. Entities.Expense
    Interfaces.IEntity <|.. Entities.Income
    Interfaces.IEntity <|.. Entities.Budget
    Interfaces.IEntity <|.. Entities.Goal
}

package Application {
    interface IBudgetTrackingStrategy {
        + TrackExpensesAgainstBudget(Guid userId, DateTime month): bool
    }
    interface IService <T>{    
        + Add(entity: T): void
        + Update(entity: T): void
        + Delete(id: Guid): void
        + GetById(id: Guid): IEntity
    }

    class FixedBudgetTracking implements IBudgetTrackingStrategy

    class AuthenticationService implements IAuthenticationService
    class UserService implements IUserService
    class ExpenseService implements IExpenseService
    class IncomeServiceService implements IIncomeService
    class BudgetServiceService implements IBudgetService
    class GoalServiceService implements IGoalService
    class TokenValidatorService implements ITokenValidatorService

    SERVICE IAuthenticationService {
        - IUserRepository userRepository
        
        + Register(User user): void
        + Login(string email, string password): string
    }

    SERVICE ITokenValidatorService {
        + GenerateToken(User user): string
        + ValidateToken(string token): bool
        + GetClaimsFromToken(string token): ClaimsPrincipal
    }

    SERVICE IUserService {
        - IUserRepository userRepository

        + UpdateProfile(User user): void
        + ResetPassword(string email): void
        + GetUserById(Guid userId): User
    }

    SERVICE IExpenseService implements IService {
        - IExpenseRepository expenseRepository

        + AddExpense(Expense expense): void
        + UpdateExpense(Expense expense): void
        + DeleteExpense(Guid expenseId): void
        + GetExpensesByUser(Guid userId): List<Expense>
        + GetExpenseById(Guid expenseId) : Expense
    } 

    SERVICE IIncomeService implements IService {
        - IIncomeRepository incomeRepository

        + AddIncome(Income income): void
        + UpdateIncome(Income income): void
        + DeleteIncome(Guid expenseId): void
        + GetIncomesByUser(Guid userId): List<Income>
        + GetIncomeById(Guid incomeId) : Income
    }

    SERVICE IBudgetService {
        - IBudgetRepository budgetRepository

        + AddBudget(Budget budget): void
        + UpdateBudget(Budget budget): void
        + DeleteBudget(Guid budgetId): void
        + SetBudget(Budget budget): void
        + GetMonthlyBudget(Guid userId, DateTime month): Budget
        + TrackExpensesAgainstBudget(guid userId, DateTime month, IBudgetTrackingStrategy strategy): bool
    }

    SERVICE IGoalService implements IService{
        - IGoalRepository goalRepository

        + AddGoal(Goal goal): void
        + UpdateGoal(Goal goal): void
        + DeleteGoal(Guid goalId): void
        + TrackGoalProgress(Guid userId): decimal
        + GetCurrentUserGoals(Guid userId): List<Goal>
    }

    IUserService o-- IBudgetTrackingStrategy
    IBudgetService o-- IBudgetTrackingStrategy
}

package Infraestructure {
    interface IRepository<T> {
        + Add(entity: T): void
        + Update(entity: T): void
        + Delete(id: Guid): void
        + GetById(id: Guid): IEntity
    }
    class UserRepository implements IUserRepository {
    }

    class ExpenseRepository implements IExpenseRepository {
    } 

    class IncomeRepository implements IIncomeRepository {
    }

    class BudgetRepository implements IBudgetRepository {
    }

    class GoalRepository implements IGoalRepository {
    }

    REPOSITORY IUserRepository {
        + GetUserById(guid id): User
        + AddUser(User user): void
        + UpdateUser(User user): void
    }

    REPOSITORY IExpenseRepository implements IRepository {
        + AddExpense(Expense expense): void
        + UpdateExpense(Expense expense): void
        + DeleteExpense(guid id): void
        + GetExpensesByUser(guid userId): List<Expense>
    } 

    REPOSITORY IIncomeRepository implements IRepository{
        + AddIncome(Income income): void
        + UpdateIncome(Income income): void
        + DeleteIncome(guid id): void
        + GetIncomesByUser(guid userId): List<Income>
    }

    REPOSITORY IBudgetRepository {
        + SetBudget(Budget budget): void
        + GetMonthlyBudget(guid userId, DateTime month): Budget
    }

    REPOSITORY IGoalRepository {
        + AddGoal(Goal goal): void
        + GetGoalsByUser(guid userId): List<Goal>
    }
}

package Presentation {
    CONTROLLER UserController{
        - IUserService userService

        + Register(User user): void
        + UpdateProfile(User user): bool
        + ResetPassword(string email): bool
    }

    CONTROLLER ExpenseController{
        - IExpenseService expenseService

        + CreateExpense(Expense expense): bool
        + UpdateExpense(Expense expense): bool
        + DeleteExpense(guid id): bool
        + GetExpenses(guid userId): List<Expense>
    }

    CONTROLLER IncomeController{
        - IIncomeService incomeService

        + CreateIncome(Income income): bool
        + UpdateIncome(Income income): bool
        + DeleteIncome(guid id): bool
        + GetIncomes(guid userId): List<Income>
    }

    CONTROLLER BudgetController{
        - IBudgetService budgetService 

        + SetBudget(Budget budget): bool
        + GetBudget(guid userId): Budget
    }

    CONTROLLER GoalController{
        - IGoalService goalService

        + CreateGoal(Goal goal): bool
        + TrackGoalProgress(guid userId): decimal
    }

    CONTROLLER AuthController{
        - IAuthenticationService authenticationService
        - ITokenValidatorService tokenValidatorService
        
        + Register(User user): void
        + Login(string email, string password): bool
    }

    UserController o-- IUserService
    ExpenseController o-- IExpenseService
    IncomeController o-- IIncomeService
    BudgetController o-- IBudgetService
    GoalController o-- IGoalService
    AuthController o-- IAuthenticationService
    AuthController o-- ITokenValidatorService
}

package Utils {
    class EmailSender {
        + SendEmail(string email, string subject, string body): void
    }
}

IUserRepository o-- IUserService
IUserRepository o-- IAuthenticationService
IExpenseRepository o-- IExpenseService
IIncomeRepository o-- IIncomeService
IBudgetRepository o-- IBudgetService
IGoalRepository o-- IGoalService

IUserRepository *-- User
IExpenseRepository *-- Expense
IIncomeRepository *-- Income
IBudgetRepository *-- Budget
IGoalRepository *-- Goal

UserService --> EmailSender

@enduml
