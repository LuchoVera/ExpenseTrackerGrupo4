@startuml ExpenseTrackerGroup4

left to right direction

skinparam linetype ortho

!define ENTITY class
!define SERVICE interface
!define REPOSITORY interface
!define CONTROLLER class

package Domain {
    package Interfaces {
        interface IEntity {
            + Id: Guid
        }
    }

    package Entities {
        ENTITY Budget {
            + Id: Guid
            + UserId: Guid
            + Month: DateTime
            + BudgetAmount: Decimal
        }

        ENTITY BudgetNotificationLog {
            + UserId: Guid
            + BudgetId: Guid
            + Notified80: Bool
            + Notified90: Bool
            + Notified100: Bool
        }

        ENTITY BudgetWithExpenses {
            + BudgetId: Guid
            + UserId: Guid
            + Month: DateTime
            + BudgetAmount: Decimal
            + ExpenseId: Guid
            + Amount: Decimal
            + Description: String
            + Date: DateTime
            + CreatedAt: DateTime
        }

        ENTITY Category {
            + Id: Guid
            + UserId: Guid
            + Name: String
            + ParentId: Guid
        }

        ENTITY Expense {
            + Id: Guid
            + UserId: Guid
            + Amount: Decimal
            + Description: String
            + CategoryId: Guid
            + Date: DateTime
            + CreatedAt: DateTime
        }

        ENTITY Goal {
            + Id: Guid
            + UserId: Guid
            + GoalAmount: Decimal
            + Deadline: DateTime
            + CurrentAmount: Decimal
            + CreatedAt: DateTime
        }

        ENTITY GoalNotificationLog {
            + Id: Guid
            + UserId: Guid
            + GoalId: Guid
            + Notified50: Boolean
            + Notified100: Boolean
        }

        ENTITY GoalWithDetails {
            + GoalId: Guid
            + GoalAmount: Decimal
            + Deadline: DateTime
            + CurrentAmount: Decimal
            + CreatedAt: DateTime
            + TotalIncome: Decimal
            + TotalExpenses: Decimal
        }

        ENTITY Income {
            + Id: Guid
            + UserId: Guid
            + Amount: Decimal
            + Source: String
            + Date: DateTime
            + CreatedAt: DateTime
        }

        ENTITY User {
            + Id: Guid
            + Name: String
            + Email: String
            + PasswordHash: String
            + CreatedAt: DateTime
        }
    }

    Interfaces.IEntity <|.. Entities.User
    Interfaces.IEntity <|.. Entities.Expense
    Interfaces.IEntity <|.. Entities.Income
    Interfaces.IEntity <|.. Entities.Budget
    Interfaces.IEntity <|.. Entities.Goal
    Interfaces.IEntity <|.. Entities.Category
}

package Application {
    interface IService <T>{    
        + Add(entity: T): void
        + Update(entity: T): void
        + Delete(id: Guid): void
        + GetById(id: Guid): IEntity
    }

    class AuthenticationService implements IAuthenticationService
    class UserService implements IUserService
    class ExpenseService implements IExpenseService
    class IncomeServiceService implements IIncomeService
    class BudgetServiceService implements IBudgetService
    class GoalServiceService implements IGoalService
    class TokenValidatorService implements ITokenValidatorService

    SERVICE IAuthenticationService {
        - IUserRepository userRepository
        
        + Register(User user): void
        + Login(string email, string password): string
    }

    SERVICE ITokenValidatorService {
        + GenerateToken(User user): string
        + ValidateToken(string token): bool
        + GetClaimsFromToken(string token): ClaimsPrincipal
    }

    SERVICE IUserService {
        - IUserRepository userRepository

        + UpdateProfile(User user): void
        + ResetPassword(string email): void
        + GetUserById(Guid userId): User
    }

    SERVICE IExpenseService implements IService {
        - IExpenseRepository expenseRepository

        + GetUserExpensesByCategory(Guid userId, string category): List<Expense>
        + GetUserExpensesByDateRange(Guid userId, DateTime startDate, DateTime endDate): List<Expense>
    } 

    SERVICE IIncomeService implements IService {
        - IIncomeRepository incomeRepository

        + GetUserIncomesBySource(Guid userId, string source): List<Expense>
        + GetUserIncomesByDateRange(Guid userId, DateTime startDate, DateTime endDate): List<Expense>
    }

    SERVICE IBudgetService {
        - IBudgetRepository budgetRepository

        + AddBudget(Budget budget): void
        + UpdateBudget(Budget budget): void
        + GetMonthlyBudget(Guid userId, DateTime month): Budget
        + TrackExpensesAgainstBudget(guid userId, DateTime month): bool
    }

    SERVICE IGoalService implements IService{
        - IGoalRepository goalRepository

        + TrackGoalProgress(Guid userId): decimal
        + GetCurrentUserGoals(Guid userId): List<Goal>
    }

    SERVICE ICategoryService implements IService{
        - ICategoryRepository categoryRepository

        + GetUserCategories(Guid userId): IEnumerable<Category>
        + GetDefaultCategories(): IEnumerable<Category>
    }
}

package Infraestructure {
    interface IRepository<T> {
        + Add(entity: T): void
        + Update(entity: T): void
        + Delete(id: Guid): void
        + GetById(id: Guid): IEntity
    }
    class UserRepository implements IUserRepository {
    }

    class ExpenseRepository implements IExpenseRepository {
    } 

    class IncomeRepository implements IIncomeRepository {
    }

    class BudgetRepository implements IBudgetRepository {
    }

    class GoalRepository implements IGoalRepository {
    }

    REPOSITORY IUserRepository {
        + GetUserById(guid id): User
        + AddUser(User user): void
        + UpdateUser(User user): void
        + GetUserByEmail(string email): User
    }

    REPOSITORY IExpenseRepository implements IRepository {
        + GetUserExpensesByCategory(Guid userId, string category): List<Expense>
        + GetUserExpensesByDateRange(Guid userId, DateTime startDate, DateTime endDate): List<Expense> 
    } 

    REPOSITORY IIncomeRepository implements IRepository{
        + GetUserIncomesBySource(Guid userId, string source): List<Expense>
        + GetUserIncomesByDateRange(Guid userId, DateTime startDate, DateTime endDate): List<Expense>
    }

    REPOSITORY IBudgetRepository {
        + AddBudget(Budget budget): void
        + UpdateBudget(Budget budget): void
        + GetMonthlyBudget(guid userId, DateTime month): Budget
    }

    REPOSITORY IGoalRepository implements IRepository {
        + GetCurrentGoalsByUser(guid userId): List<Goal>
    }

    REPOSITORY IBudgetNotificationLogRepository {
        + GetByBudgetIdAsync(Guid budgetId, Guid userId): void
        + InsertOrUpdateAsync(BudgetNotificationLog log): void
    }

    REPOSITORY ICategoryRepository {
        + GetDefaultCategories(): void
        + GetUserCategories(Guid userId): void
    }

    REPOSITORY IGoalNotificationLogRepository {
        + GetByGoalIdAsync(Guid goalId, Guid userId): void
        + InsertOrUpdateAsync(GoalNotificationLog log): void
    }
}

package Presentation {
    CONTROLLER UserController{
        - IUserService userService

        + GetUserById(Guid id): User
        + UpdateUser(Guid userId, UserUpdateRequestDTO userUpdated): void'
        + GetUserByEmail(string email): User
        + DeleteUser(Guid id): void
        + ResetPassword(string email): void
    }

    CONTROLLER ExpenseController{
        - IExpenseService expenseService

        + CreateExpense(CreateUpdateExpenseDto dto): void
        + UpdateExpense(CreateUpdateExpenseDto dto): void
        + DeleteExpense(Guid id): void
        + GetExpenses(): List<Expense>
        + GetExpenseById(Guid id): Expense
    }

    CONTROLLER IncomeController{
        - IIncomeService incomeService

        + CreateIncome(IncomeDto incomeDto): void
        + UpdateIncome(IncomeDto updatedIncomeDto): void
        + DeleteIncome(Guid id): void
        + GetIncomes(): List<Income>
        + GetIncomeById(Guid id): Income
    }

    CONTROLLER BudgetController{
        - IBudgetService budgetService 

        + CreateBudget(CreateUpdateBudgetDto dto): void
        + UpdateBudget(CreateUpdateBudgetDto dto): void
        + GetMonthlyBudget(): Budget
    }

    CONTROLLER GoalController{
        - IGoalService goalService

        + CreateGoal(CreateUpdateGoalDto dto): void
        + UpdateGoal(CreateUpdateGoalDto dto): void
        + DeleteGoal(Guid id): void
        + GetCurrentGoals(): List<Goal>
    }

    CONTROLLER AuthController{
        - IAuthenticationService authenticationService
        - ITokenValidatorService tokenValidatorService
        
        + Register(RegisterRequestDTO request): void
        + Login(LoginRequestDTO request): string
    }

    CONTROLLER CategoryController{
        - ICategoryService _categoryService

        + CreateCategory(CreateCategoryDTO categoryDTO): void
        + DeleteCategory(Guid categoryId): void
        + GetCategoryById(Guid id): Category
        + GetUserCategories() : IEnumerable<Category>
        + GetDefaultCategories() : IEnumerable<Category>
        + UpdateCategory(Guid id, UpdateCategoryDTO updateCategoryDTO)
    }

    CONTROLLER PasswordResetController{
        - IUserRepository _userRepository
        - EmailService _emailService

        + RequestPasswordReset(PasswordResetRequestDto request) : void
        + ConfirmPasswordReset(PasswordResetConfirmDto confirmRequest) : void
    }

    UserController o-- IUserService
    ExpenseController o-- IExpenseService
    IncomeController o-- IIncomeService
    BudgetController o-- IBudgetService
    GoalController o-- IGoalService
    AuthController o-- IAuthenticationService
    AuthController o-- ITokenValidatorService
}

package Utils {
    class EmailSender {
        + SendEmail(string email, string subject, string body): void
    }

    class PasswordHasher {
        + HashPassword(string password): string
        + VerifyPassword(string hashedPassword, string providedPassword) : bool
    }

    class TokenValidatorConstants {
        - String _secretKey
        - String _resetPasswordSecretKey
    }

    class UserIdClaimer {
         + GetCurrentUserId(ClaimsPrincipal user) : Guid
    }
}

IUserRepository o-- IUserService
IUserRepository o-- IAuthenticationService
IExpenseRepository o-- IExpenseService
IIncomeRepository o-- IIncomeService
IBudgetRepository o-- IBudgetService
IGoalRepository o-- IGoalService

IUserRepository *-- User
IExpenseRepository *-- Expense
IIncomeRepository *-- Income
IBudgetRepository *-- Budget
IGoalRepository *-- Goal

UserService --> EmailSender
GoalController --> UserIdClaimer
UserController --> UserIdClaimer
BudgetController --> UserIdClaimer
CategoryController --> UserIdClaimer
ExpenseController --> UserIdClaimer
PasswordResetController --> TokenValidatorConstants

package DTOs {
    class CreateCategoryDTO
    {
        - string Name
        - Guid? ParentId
    }

    class CreateUpdateBudgetDto
    {
        - DateTime Month
        - decimal BudgetAmount
    }

    class CreateUpdateExpenseDto
    {
        - decimal? Amount 
        - string? Description 
        - Guid? CategoryId 
        - DateTime? Date 
    }

    class CreateUpdateGoalDto
    {
        - decimal GoalAmount
        - DateTime Deadline
        - decimal CurrentAmount
    }

    class GoalWithDetailsDto
    {
        - Guid GoalId
        - decimal GoalAmount
        - DateTime Deadline
        - decimal CurrentAmount
        - DateTime CreatedAt
        - decimal TotalIncome
        - decimal TotalExpenses
    }

    class IncomeDto
    {
        - decimal Amount 
        - required string Source 
        - DateTime Date 
    }

    class IncomeResponseDto
    {
        - Guid UserId
        - decimal Amount
        - string Source
        - DateTime Date
        - DateTime CreatedAt
    }

    class LoginRequestDTO
    {
        - string Email
        - string Password
    }

    class PasswordResetConfirmDto
    {
        - string Email
        - string Token
        - string NewPassword
    }

    class PasswordResetRequestDto
    {
        - string Email
    }

    class RegisterRequestDTO
    {
        - string Name
        - string Email
        - string Password
    }

    class UpdateCategoryDTO
    {
        - string Name
    }

    class UserUpdateRequestDTO
    {
        - string Name
        - string Email
    }
}

CategoryController o-- UpdateCategoryDTO
AuthController o-- RegisterRequestDTO
AuthController o-- LoginRequestDTO
BudgetController o-- CreateUpdateBudgetDto
ExpenseController o-- CreateUpdateExpenseDto
GoalController o-- CreateUpdateGoalDto
IncomeController o-- IncomeDto
IncomeController o-- IncomeResponseDto
PasswordResetController o-- PasswordResetConfirmDto
PasswordResetController o-- PasswordResetConfirmDto
UserController o-- UserUpdateRequestDTO

package Command {
    interface ICommand<T> {
        + T Execute();
    }

    class CommandInvoker{
        + T Execute<T>(ICommand<T> command)
    }
}

@enduml
